//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? 3? 10 2023 14:05:31
//
//      Input file      : 
//      Component name  : flipflops
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module FlipFlops(clk, rst, in1, out1, in2, out2, in3, out3, in4, out4, s_apb_paddr, s_apb_psel, s_apb_penable, s_apb_pwrite, s_apb_pwdata, s_apb_pready, s_apb_prdata, s_apb_pslverr);
   input         clk;
   input         rst;
   
   input         in1;
   output        out1;
   reg           out1;
   input         in2;
   output        out2;
   reg           out2;
   input         in3;
   output        out3;
   reg           out3;
   input         in4;
   output        out4;
   reg           out4;
   input [31:0]  s_apb_paddr;
   input         s_apb_psel;
   input         s_apb_penable;
   input         s_apb_pwrite;
   input [31:0]  s_apb_pwdata;
   output        s_apb_pready;
   output [31:0] s_apb_prdata;
   output        s_apb_pslverr;
   
   
   reg           prev1;
   reg           outp1;
   reg           prev2;
   reg           outp2;
   reg           prev3;
   reg           outp3;
   reg           prev4;
   reg           outp4;
   reg [4:0]     status;
   
   
   always @(posedge clk)
   begin: out_1
      
      begin
         if (rst == 1'b0)
         begin
            outp1 <= 1'b0;
            prev1 <= 1'b0;
         end
         else if (status[4] == 1'b0)
         begin
            if ((prev1 == 1'b0) & (in1 == 1'b1))
            begin
               outp1 <= (~(outp1));
               out1 <= outp1;
            end
            prev1 <= in1;
         end
         else if (status[4] == 1'b1)
            out1 <= status[0];
      end
   end
   
   
   always @(posedge clk)
   begin: out_2
      
      begin
         if (rst == 1'b0)
         begin
            outp2 <= 1'b0;
            prev2 <= 1'b0;
         end
         else if (status[4] == 1'b0)
         begin
            if ((prev2 == 1'b0) & (in2 == 1'b1))
            begin
               outp2 <= (~(outp2));
               out2 <= outp2;
            end
            prev2 <= in2;
         end
         else if (status[4] == 1'b1)
            out2 <= status[1];
      end
   end
   
   
   always @(posedge clk)
   begin: out_3
      
      begin
         if (rst == 1'b0)
         begin
            outp3 <= 1'b0;
            prev3 <= 1'b0;
         end
         else if (status[4] == 1'b0)
         begin
            if ((prev3 == 1'b0) & (in3 == 1'b1))
            begin
               outp3 <= (~(outp3));
               out3 <= outp3;
            end
            prev3 <= in3;
         end
         else if (status[4] == 1'b1)
            out3 <= status[2];
      end
   end
   
   
   always @(posedge clk)
   begin: out_4
      
      begin
         if (rst == 1'b0)
         begin
            outp4 <= 1'b0;
            prev4 <= 1'b0;
         end
         else if (status[4] == 1'b0)
         begin
            if ((prev4 == 1'b0) & (in4 == 1'b1))
            begin
               outp4 <= (~(outp4));
               out4 <= outp4;
            end
            prev4 <= in4;
         end
         else if (status[4] == 1'b1)
            out4 <= status[3];
      end
   end
   
   
   always @(posedge clk)
   begin: apb_activation
      
      begin
         if ((s_apb_pwrite == 1'b1) & (s_apb_psel == 1'b1) & (s_apb_penable == 1'b1))
            status <= s_apb_pwdata[4:0];
      end
   end
   assign s_apb_pready = 1'b1;
   assign s_apb_prdata[4:0] = status;
   assign s_apb_pslverr = 1'b0;
   
endmodule
